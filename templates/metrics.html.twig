{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block body %}
    <main class="main">
        <h1 class="page-title-special">Metrics</h1>
        <br>
        <br>
        <article class="metric-article">
            <h1 class="metric-h1">Introduktion</h1>
            <ul>
                <li class="metric-li">Codestyle</li>
                <p>Codestyle påverkar inte direkt funktionaliteten i koden utan syftar mer på sättet som koden är skrivet.</p>
                <p>Är koden lättläst, är den lätt att följa?</p>
                <p>Hur konsekvent är koden, är indentering, namngivning och så vidare konsekvent?</p>

                <li class="metric-li">Coverage</li>
                <p>Handlar främst hur stor del av koden som testas av testerna.</p>
                <p>Hög täckning, "coverage", kan innebära att koden är väl testad.</p>
                <p>Låg täckning, "coverage", kan innebära potentiell risk inom försäkran om kvalitén.</p>
                <p>En kodbas med lågtäckning är med andra ord dåligt testad eller till viss del inte testad alls, vilket kan säga en hel del om kodens kvalité.</p>

                <li class="metric-li">Complexity</li>
                <p>Namnnet säger det mesta - hur komplex är koden?</p>
                <p>Och i förlängning: hur lätt eller svår är koden att underhålla eller utveckla vidare?</p>
                <p>Kod med hög komplexitet är svårare att följa, vilket betyder att den är svårare att förstå, vilket innebär större risk för buggar.</p>
                 
                <li class="metric-li">Cohesion</li>
                <p>Även kallad LCOM - Lack of Cohesion of Methods.</p>
                <p>Cohesion mäter hur tätt alla delar i en klass hänger ihop.</p>
                <p>Låg LCOM är bra eftersom det innebär att graden koden har på bristande "cohesion" är låg.</p>
                <p>Tvärtom innebär en hög LCOM att bristen på sammansättning i koden är hög.</p>

                <li class="metric-li">Coupling</li>
                <p>Visar på i vilken grad olika delar av koden är beroende av varandra, till exempel hur en klass kanske används i en annan klass.</p>
                <p>Mäts i Ce = mäter antalet klasser som klassen i fråga är beroende av. 
                <br>
                Hög Ce betyder att klassen i fråga är beroende av många andra klasser och kan då vara känslig för förändringar i dessa klasser.</p>
                <p>
                    Mäts i Ca = mäter antalet klasser som är beroende av klassen i fråga.
                    <br>
                    Hög Ca betyder att många andra klasser förlitar sig på klassen i fråga och eventuella förändring i klassen i fråga kan påverka resten av programmet.
                </p>
                <li class="metric-li">CRAP: Change Risk Anti Patterns</li>
                <p>Ett mått på hur riskabel en metod är att ändra och ett sätt att håll koll på metoden. </p>
                <p>CRAP score är en blandning av storlek på metoden, komplexiteten samt hur väl testad metoden är. </p>
                <p>Ju högre komplexitet, desto större andel av koden behöver vara testad för att hålla sig under en "CRAPpy" nivå.</p>
            </ul>
            <h1 class="metric-h1">Phpmetrics</h1>
            <img class="metrics-pic" src="{{ asset('img/phpmetric.png') }}" alt="phpmetric measurements">
            <br>
            <br>
            <img class="metrics-pic" src="{{ asset('img/phpmetric2.png') }}" alt="phpmetric measurements two">
            <br>
            <br>
            <p>
                Enligt phpmetrics så har jag flera stycken instanser av för komplicerad kod.
                <br>
                Klass cyklomatiska komplexiteten är för hög för controllerna för CardGame, CardGameApi, Game och Library.
                <br>
                Jag tror att här finns förbättringspotential.
                <br>
                Den här koden kan vara svår att underhålla i längden, kanske.
            </p>
            <h1 class="metric-h1">Scrutinizer</h1>
            <div class="scrutinizer-div">
                <a href="https://scrutinizer-ci.com/g/malw24/mvc-course/">
                <img class="scrutinizer-badge" src="https://scrutinizer-ci.com/g/malw24/mvc-course/badges/quality-score.png?b=main" alt="Code Quality">
                </a>
                <a href="https://scrutinizer-ci.com/g/malw24/mvc-course/">
                <img class="scrutinizer-badge" src="https://scrutinizer-ci.com/g/malw24/mvc-course/badges/coverage.png?b=main" alt="Code Coverage">
                </a>
                <a href="https://scrutinizer-ci.com/g/malw24/mvc-course/inspections/64bf1f29-27a5-4cca-9acd-e97eb79e58f3/log">
                <img class="scrutinizer-badge" src="https://scrutinizer-ci.com/g/malw24/mvc-course/badges/build.png?b=main" alt="Build Status">
                </a>
            </div>
            <img class="scrutinizer-pic" style="margin: 0 auto;" src="{{ asset('img/scrutinizer.png') }}" alt="scrutinizer measurements">
            <p>
                Enligt Scrutinizer så är koden "very good" men det finns förbättringspotential.
                <br>
                Första åtgärd som behöver göras är GameController som utvärderas som "critical" av scrutinizer.
                <br>
                Kodens täckning är även inte speciellt mycket att gå på.
            </p>
            <img class="scrutinizer-pic" style="margin: 0 auto;" src="{{ asset('img/scrutinizer2.png') }}" alt="scrutinizer measurements two">
            <p>
                Det finns en specifik metod vid namn "apiDeckDrawAmount()" i controllern CardGameApiJson som har fått ratingen C.
            </p>
            <img class="scrutinizer-pic" style="margin: 0 auto;" src="{{ asset('img/scrutinizer3.png') }}" alt="scrutinizer measurements three">
            <p>
                Det finns även en del metoder i flera olika kontroller som har ratingen B.
            </p>
            
            <h1 class="metric-h1">Förbättringar och findings</h1>
            <p>
                Min kods struktur är generellt konsekvent. 
                Dock antyder CRAP-värdena och komplexiteterna på att vissa metoder skulle kunna må bra av av omskrivning för förbättrad läsbarhet.
            </p>
            <p style="margin: 0px;">
                GameController utvärderas som kritisk och jag vill därför ge mig på den först och främst.
            </p>
            <p>
                Därefter har apiDeckDrawAmount() en komplexitet på 12 och CRAP på 156 vilket tyder på att koden där kan vara svår följa, underhålla samt vidareutveckla.
                Även drawAmountOfCards() har ett komplexitet och CRAP-värde som är högt, vilket är något som jag vill förbättra.
            </p>
            <p>
                Täckningen är låg, ja, men det är för större delen av koden i mitt program återfinns i controllerna som vi inte har gjort tester för.
            </p>
            <p style="text-align: left; margin: 0px; margin-bottom: 20px;">
                Så, det jag kommer börja med att försöka förbättra är följande:
            </p>
            <br>
            <br>
            <img class="metrics-pic" src="{{ asset('img/phpmetric.png') }}" alt="phpmetric measurements">
            <br>
            <br>
            <p>
                PHPstan pratar bland annat om denna för GameController:
                <br>
                /GameController.php // CyclomaticComplexity // The method gamePlay() has a Cyclomatic Complexity of 20. The configured cyclomatic complexity threshold is 10.
                <br>
                Att lyfta ut en del av koden och lägga den som en separat del kommer att förbättra koden och dess mätvärden avsevärt, tror jag.
                <br>
                Att lyfta ut delar av koden kommer göra det både lättare att läsa koden, eftersom det inte blir lika mycket text, men det kommer även bli enklare att underhålla samt felsöka den.
                <br>
                Anledning till varför jag väljer att göra detta är för att det är något jag velat göra ett tag, det är något som behöver göras, samt att jag vill få ner cyklomatiska komplexiteten.
            </p>
            <br>
            <br>
            <p>
               apiDeckDrawAmount() i CardGameApiJson har också för hög cyklomatisk komplexitet.
               <br>
               Det verkar vara ett återkommande fenomen för mina controllers.
               <br>
               Lösningen på detta är samma här, lyfta ut kod, gör delar av koden, av funktionaliteten, fristående och därmed lättare att felsöka och underhålla.
               <br>
               Detta gör också flödet i apiDeckDrawAmount() lättare att följa.
            </p>
            <p style="margin: 0;">
                För CardGameController, återigen, samma sak här.
                <br>
                Logik måste separeras, lyftas ut, så att metoden inte är lika "kladdig" och lättare att följa.
            </p>
            
            <h2>Förbättring</h2>
            <img class="scrutinizer-pic" style="margin: 0 auto;" src="{{ asset('img/scrutinizer4.png') }}" alt="scrutinizer measurements four">
            <p>
                Efter att ha total lyft ut och "renoverat" om GameControllern till mindre metoder så har critical värderingen försvunnit.
                <br>
                Den total poängen har även ökat till 9.61 från 9.16.
                <br>
                I utförandet av förbättringen så utgick jag från PHPmd som jag vet sedan tidigare hade klagat på GameControllerns cyklomatiska komplexitet (alltså att den är för hög).
                Och jag märkte tidigt att lyfta ut endast en del av controllern inte gjorde tillräckligt stor skillnad, så det hela slutade i att jag delade upp hela controllern i mindre metoder.
                <br>
                Och det gjorde tricket.
            </p>
            <img class="scrutinizer-pic" style="margin: 0 auto;" src="{{ asset('img/scrutinizer5.png') }}" alt="scrutinizer measurements five">
            <p>
                I min andra förbättring så fixade jag till apiDeckDrawAmount() i CardGameApiJson som hade en cyklomatisk komplexitet på 12.
                <br>
                Detta höjde även totala poängen till 9.68 men främst så förenkla det apiDeckDrawAmount() vilket gör den enklare att underhålla och bygga vidare på.

            </p>
            <img class="scrutinizer-pic" style="margin: 0 auto;" src="{{ asset('img/scrutinizer6.png') }}" alt="scrutinizer measurements six">
            <p>
                Återigen var problemet att den cyklomatiska komplexiteten var för hög, denna gång 11 i värde för drawAmountOfCards i CardGameController.
                <br>
                Lösningen var densamma som tidigare, jag flyttade ut en del av logien i en metod som anropas och på sätt minskar jag komplexiteten.
            </p>
        </article>
    </main>
{% endblock %}